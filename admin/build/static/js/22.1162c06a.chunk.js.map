{"version":3,"sources":["containers/ApiFun.js","views/charts/MainChartExample.js","views/dashboard/Dashboard.js"],"names":["headerToken","headers","localStorage","adminToken","getDashboardCounts","AxiosBase","get","getPatients","deactiveUser","status","id","put","activeDoctors","pendingDoctors","approveDocForm","docformId","console","log","declineDocForm","verifiedInsurance","pendingInsurance","rejectedInsurance","updateInsurance","getAllSpecialities","addNewSpeciality","formData","post","deleteSpeciality","specialityId","delete","updateSpeciality","data","getAllLanguages","addNewLanguage","name","deleteLanguage","languageId","updatePassword","allConsultations","allAppointments","updateSocial","getSocial","brandSuccess","getStyle","brandInfo","brandDanger","MainChartExample","attributes","random","min","max","Math","floor","defaultDatasets","data1","data2","data3","i","push","doctors","patients","label","backgroundColor","hexToRgba","borderColor","pointHoverBackgroundColor","borderWidth","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","datasets","options","labels","WidgetsDropdown","lazy","Dashboard","useQuery","countsData","isLoading","currentDate","Date","sm","className","formatDate","color","map","value","active","style","height","marginTop","md","precision","doctorForms"],"mappings":"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","file":"static/js/22.1162c06a.chunk.js","sourcesContent":["import AxiosBase from \"../config/AxiosBase\";\r\n\r\nconst token = localStorage.adminToken;\r\nconst headerToken = {\r\n  headers: {\r\n    \"x-access-token\": token,\r\n  },\r\n};\r\n\r\n// dashboard api\r\nexport const getDashboardCounts = () => {\r\n  return AxiosBase.get(`/admin/counts`, headerToken);\r\n};\r\n\r\n// patient api\r\nexport const getPatients = () => {\r\n  return AxiosBase.get(`/admin/all-patients`, headerToken);\r\n};\r\n\r\nexport const deactiveUser = ({ status, id }) => {\r\n  return AxiosBase.put(`/admin/deactive-user/${id}`, { status }, headerToken);\r\n};\r\n\r\n// doctor api\r\nexport const activeDoctors = () => {\r\n  return AxiosBase.get(`/admin/active-doctors`, headerToken);\r\n};\r\nexport const pendingDoctors = () => {\r\n  return AxiosBase.get(`/admin/pending-doctors`, headerToken);\r\n};\r\nexport const declinedDoctors = () => {\r\n  return AxiosBase.get(`/admin/declined-doctors`, headerToken);\r\n};\r\n\r\n// doctor form\r\nexport const approveDocForm = (docformId) => {\r\n  console.log(docformId);\r\n  return AxiosBase.put(`/admin/approve-doc-form/${docformId}`, {}, headerToken);\r\n};\r\nexport const declineDocForm = (docformId) => {\r\n  console.log(docformId);\r\n  return AxiosBase.put(`/admin/decline-doc-form/${docformId}`, {}, headerToken);\r\n};\r\n\r\n// insurance\r\n\r\nexport const verifiedInsurance = () => {\r\n  return AxiosBase.get(`/insurance/form?status=accepted`, headerToken);\r\n};\r\nexport const pendingInsurance = () => {\r\n  return AxiosBase.get(`/insurance/form?status=pending`, headerToken);\r\n};\r\nexport const rejectedInsurance = () => {\r\n  return AxiosBase.get(`/insurance/form?status=rejected`, headerToken);\r\n};\r\nexport const updateInsurance = ({ id, status }) => {\r\n  return AxiosBase.put(`/insurance/form/${id}`, { status }, headerToken);\r\n};\r\n\r\n// speciality api\r\nexport const getAllSpecialities = () => {\r\n  return AxiosBase.get(`/admin/all-speciality`, headerToken);\r\n};\r\nexport const addNewSpeciality = ({ formData }) => {\r\n  return AxiosBase.post(`/admin/new-speciality`, formData, headerToken);\r\n};\r\nexport const deleteSpeciality = (specialityId) => {\r\n  return AxiosBase.delete(\r\n    `/admin/delete-speciality/${specialityId}`,\r\n    headerToken\r\n  );\r\n};\r\nexport const updateSpeciality = ({ data, id }) => {\r\n  return AxiosBase.put(`/admin/update-speciality/${id}`, data, headerToken);\r\n};\r\n\r\n// language api\r\nexport const getAllLanguages = () => {\r\n  return AxiosBase.get(`/admin/all-languages`, headerToken);\r\n};\r\nexport const addNewLanguage = (name) => {\r\n  return AxiosBase.post(`/admin/new-language`, name, headerToken);\r\n};\r\nexport const deleteLanguage = (languageId) => {\r\n  console.log(languageId);\r\n  return AxiosBase.delete(`/admin/delete-language/${languageId}`, headerToken);\r\n};\r\n\r\n// setting\r\nexport const updatePassword = (data) => {\r\n  return AxiosBase.post(`/admin/update-password`, data, headerToken);\r\n};\r\n\r\nexport const allConsultations = () => {\r\n  return AxiosBase.get(`/admin/all-consultations`, headerToken);\r\n};\r\n\r\nexport const allAppointments = () => {\r\n  return AxiosBase.get(`/admin/all-appointments`, headerToken);\r\n};\r\n\r\n// social\r\nexport const updateSocial = (data) => {\r\n  return AxiosBase.post(`/admin/update-social-links`, data, headerToken);\r\n};\r\nexport const getSocial = () => {\r\n  return AxiosBase.get(`/admin/get-social-links`, headerToken);\r\n};\r\n","import React from \"react\";\r\nimport { CChartLine } from \"@coreui/react-chartjs\";\r\nimport { getStyle, hexToRgba } from \"@coreui/utils\";\r\n\r\nconst brandSuccess = getStyle(\"success\") || \"#4dbd74\";\r\nconst brandInfo = getStyle(\"info\") || \"#20a8d8\";\r\nconst brandDanger = getStyle(\"danger\") || \"#f86c6b\";\r\n\r\nconst MainChartExample = (attributes) => {\r\n  const random = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const defaultDatasets = (() => {\r\n    let elements = 27;\r\n    const data1 = [];\r\n    const data2 = [];\r\n    const data3 = [];\r\n    for (let i = 0; i <= elements; i++) {\r\n      data1.push(random(0, attributes?.data?.doctors));\r\n      data2.push(random(0, attributes?.data?.patients));\r\n      data3.push(random(0, attributes?.data?.pendingDoctors));\r\n    }\r\n\r\n    return [\r\n      {\r\n        label: \"Active Doctors\",\r\n        backgroundColor: hexToRgba(brandInfo, 10),\r\n        borderColor: brandInfo,\r\n        pointHoverBackgroundColor: brandInfo,\r\n        borderWidth: 2,\r\n        data: data1,\r\n      },\r\n      {\r\n        label: \"Total Patients\",\r\n        backgroundColor: \"transparent\",\r\n        borderColor: brandSuccess,\r\n        pointHoverBackgroundColor: brandSuccess,\r\n        borderWidth: 2,\r\n        data: data2,\r\n      },\r\n      {\r\n        label: \"Pending Doctors\",\r\n        backgroundColor: \"transparent\",\r\n        borderColor: brandDanger,\r\n        pointHoverBackgroundColor: brandDanger,\r\n        borderWidth: 2,\r\n        // borderDash: [8, 5],\r\n        data: data3,\r\n      },\r\n    ];\r\n  })();\r\n\r\n  const defaultOptions = (() => {\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            gridLines: {\r\n              drawOnChartArea: false,\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true,\r\n              maxTicksLimit: 5,\r\n              stepSize: Math.ceil(50 / 5),\r\n              max: 50,\r\n            },\r\n            gridLines: {\r\n              display: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4,\r\n          hoverBorderWidth: 3,\r\n        },\r\n      },\r\n    };\r\n  })();\r\n\r\n  // render\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={[\r\n        \"Mo\",\r\n        \"Tu\",\r\n        \"We\",\r\n        \"Th\",\r\n        \"Fr\",\r\n        \"Sa\",\r\n        \"Su\",\r\n        \"Mo\",\r\n        \"Tu\",\r\n        \"We\",\r\n        \"Th\",\r\n        \"Fr\",\r\n        \"Sa\",\r\n        \"Su\",\r\n        \"Mo\",\r\n        \"Tu\",\r\n        \"We\",\r\n        \"Th\",\r\n        \"Fr\",\r\n        \"Sa\",\r\n        \"Su\",\r\n        \"Mo\",\r\n        \"Tu\",\r\n        \"We\",\r\n        \"Th\",\r\n        \"Fr\",\r\n        \"Sa\",\r\n        \"Su\",\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MainChartExample;\r\n","import React, { lazy } from \"react\";\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CCallout,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\n\r\nimport MainChartExample from \"../charts/MainChartExample.js\";\r\nimport { format as formatDate, parseISO } from \"date-fns\";\r\nimport { getDashboardCounts } from \"../../containers/ApiFun.js\";\r\nimport { useQuery } from \"react-query\";\r\nconst WidgetsDropdown = lazy(() => import(\"../widgets/WidgetsDropdown.js\"));\r\nconst WidgetsBrand = lazy(() => import(\"../widgets/WidgetsBrand.js\"));\r\n\r\nconst Dashboard = () => {\r\n  const { data: countsData, isLoading } = useQuery(\r\n    \"Counts\",\r\n    getDashboardCounts\r\n  );\r\n\r\n  const data = countsData?.data;\r\n\r\n  const currentDate = new Date();\r\n  return (\r\n    <>\r\n      <WidgetsDropdown data={data} />\r\n      <CCard>\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm=\"5\">\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Statistic\r\n              </h4>\r\n              <div className=\"small text-muted\">\r\n                {formatDate(currentDate, \"MMMM y\")}\r\n              </div>\r\n            </CCol>\r\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\r\n              <CButton color=\"primary\" className=\"float-right\">\r\n                <CIcon name=\"cil-cloud-download\" />\r\n              </CButton>\r\n              <CButtonGroup className=\"float-right mr-3\">\r\n                {[\"Month\"].map((value) => (\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    key={value}\r\n                    className=\"mx-0\"\r\n                    active={value === \"Month\"}\r\n                  >\r\n                    {value}\r\n                  </CButton>\r\n                ))}\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n          <MainChartExample\r\n            data={data}\r\n            style={{ height: \"300px\", marginTop: \"40px\" }}\r\n          />\r\n        </CCardBody>\r\n        <CCardFooter>\r\n          <CRow className=\"text-center\">\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <strong>Active Doctors {data?.doctors}</strong>\r\n              <CProgress\r\n                className=\"progress-xs mt-2\"\r\n                precision={1}\r\n                color=\"success\"\r\n                value={data?.doctors}\r\n              />\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0 d-md-down-none\">\r\n              <strong>Pending Doctors {data?.pendingDoctors}</strong>\r\n              <CProgress\r\n                className=\"progress-xs mt-2\"\r\n                precision={1}\r\n                color=\"info\"\r\n                value={data?.pendingDoctors}\r\n              />\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <strong>Total Patients {data?.patients} </strong>\r\n              <CProgress\r\n                className=\"progress-xs mt-2\"\r\n                precision={1}\r\n                color=\"warning\"\r\n                value={data?.patients}\r\n              />\r\n            </CCol>\r\n            <CCol md sm=\"12\" className=\"mb-sm-2 mb-0\">\r\n              <strong>Total Doctor Forms {data?.doctorForms} </strong>\r\n              <CProgress\r\n                className=\"progress-xs mt-2\"\r\n                precision={1}\r\n                color=\"danger\"\r\n                value={data?.doctorForms}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n        </CCardFooter>\r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}