{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/pages/Patient/AddPatient.js"],"names":["_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","_arrayLikeToArray","arr","len","length","i","arr2","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","AddPatient","useState","setName","email","setEmail","password","setPassoword","rePassword","setRePassoword","errors","setErrors","submit","setSubmit","useEffect","validate","onSubmit","e","a","preventDefault","formData","token","localStorage","adminToken","AxiosBase","post","headers","Swal","fire","position","icon","title","showConfirmButton","timer","history","response","data","message","keys","className","md","lg","xl","type","onChange","target","placeholder","autoComplete","onClick","color","block"],"mappings":"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","file":"static/js/19.eb0abb60.chunk.js","sourcesContent":["import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport AxiosBase from \"../../../config/AxiosBase\";\nimport history from \"../../../config/history\";\nimport Swal from \"sweetalert2\";\n\nconst AddPatient = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassoword] = useState(\"\");\n  const [rePassword, setRePassoword] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const [submit, setSubmit] = useState(false);\n\n  useEffect(() => {\n    submit && validate();\n    return () => {};\n  }, [name, email, password, rePassword]);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setSubmit(true);\n    const valid = validate();\n    if (valid > 0) return;\n\n    const formData = {\n      name,\n      email,\n      password,\n    };\n    const token = localStorage.adminToken;\n    try {\n      const response = await AxiosBase.post(`/admin/new-patient`, formData, {\n        headers: {\n          \"x-access-token\": token,\n        },\n      });\n      Swal.fire({\n        position: \"top-end\",\n        icon: \"success\",\n        title: \"Patient Added\",\n        showConfirmButton: false,\n        timer: 2000,\n      });\n      history.push(\"/admin/parent\");\n    } catch (error) {\n      let err = error?.response?.data?.message;\n      if (err) setErrors(err);\n      if (err)\n        Swal.fire({\n          position: \"top-end\",\n          icon: \"error\",\n          title: \"Check Error\",\n          showConfirmButton: false,\n          timer: 2000,\n        });\n    }\n  };\n\n  const validate = () => {\n    let errors = {};\n    if (!name) errors.name = \"Name is required\";\n    if (!email) errors.email = \"Email is required\";\n    if (password !== rePassword)\n      errors.rePassword = \"re-password is not matched\";\n    if (!password) errors.password = \"Password is required\";\n    if (!rePassword) errors.rePassword = \"Re-Password is required\";\n\n    setErrors(errors);\n    return Object.keys(errors).length;\n  };\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Add Patient Account</h1>\n                  <p className=\"text-muted\">Create new account for Parent</p>\n                  <CInputGroup className=\"\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      onChange={(e) => setName(e.target.value)}\n                      placeholder=\"Name\"\n                      autoComplete=\"name\"\n                    />\n                  </CInputGroup>\n                  {errors.name && (\n                    <div className=\"errorText\">{errors.name}</div>\n                  )}\n                  <CInputGroup className=\"mt-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                    />\n                  </CInputGroup>\n                  {errors.email && (\n                    <div className=\"errorText\">{errors.email}</div>\n                  )}\n                  <CInputGroup className=\"mt-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      onChange={(e) => setPassoword(e.target.value)}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                    />\n                  </CInputGroup>\n                  {errors.password && (\n                    <div className=\"errorText\">{errors.password}</div>\n                  )}\n                  <CInputGroup className=\"mt-4\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      onChange={(e) => setRePassoword(e.target.value)}\n                      type=\"password\"\n                      placeholder=\"Repeat password\"\n                      autoComplete=\"new-password\"\n                    />\n                  </CInputGroup>\n                  {errors.rePassword && (\n                    <div className=\"errorText\">{errors.rePassword}</div>\n                  )}\n                  <CButton\n                    className=\"mt-3\"\n                    onClick={onSubmit}\n                    color=\"success\"\n                    block\n                    type=\"button\"\n                  >\n                    Submit\n                  </CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default AddPatient;\n"],"sourceRoot":""}